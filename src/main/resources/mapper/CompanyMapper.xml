<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.contract.mapper.CompanyMapper">
  <resultMap id="BaseResultMap" type="com.contract.model.Company">
    <id column="ID" jdbcType="INTEGER" property="ID" />
    <id column="code" jdbcType="CHAR" property="code" />
    <result column="codeName" jdbcType="VARCHAR" property="codeName" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="address" jdbcType="VARCHAR" property="address" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, code, codeName, name, address
  </sql>
  <select id="selectByExample" parameterType="com.contract.model.CompanyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from mycompany
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.contract.model.CompanyKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from mycompany
    where ID = #{ID,jdbcType=INTEGER}
      and code = #{code,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.contract.model.CompanyKey">
    delete from mycompany
    where ID = #{ID,jdbcType=INTEGER}
      and code = #{code,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.contract.model.CompanyExample">
    delete from mycompany
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.contract.model.Company">
    insert into mycompany (ID, code, codeName, 
      name, address)
    values (#{ID,jdbcType=INTEGER}, #{code,jdbcType=CHAR}, #{codeName,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.contract.model.Company">
    insert into mycompany
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="ID != null">
        ID,
      </if>
      <if test="code != null">
        code,
      </if>
      <if test="codeName != null">
        codeName,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="address != null">
        address,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="ID != null">
        #{ID,jdbcType=INTEGER},
      </if>
      <if test="code != null">
        #{code,jdbcType=CHAR},
      </if>
      <if test="codeName != null">
        #{codeName,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.contract.model.CompanyExample" resultType="java.lang.Long">
    select count(*) from mycompany
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update mycompany
    <set>
      <if test="record.ID != null">
        ID = #{record.ID,jdbcType=INTEGER},
      </if>
      <if test="record.code != null">
        code = #{record.code,jdbcType=CHAR},
      </if>
      <if test="record.codeName != null">
        codeName = #{record.codeName,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update mycompany
    set ID = #{record.ID,jdbcType=INTEGER},
      code = #{record.code,jdbcType=CHAR},
      codeName = #{record.codeName,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.contract.model.Company">
    update mycompany
    <set>
      <if test="codeName != null">
        codeName = #{codeName,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{ID,jdbcType=INTEGER}
      and code = #{code,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.contract.model.Company">
    update mycompany
    set codeName = #{codeName,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR}
    where ID = #{ID,jdbcType=INTEGER}
      and code = #{code,jdbcType=CHAR}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="com.contract.model.CompanyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from mycompany
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>